// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef PROTOBUF_message_2eproto__INCLUDED
#define PROTOBUF_message_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace delta {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_message_2eproto();
void protobuf_AssignDesc_message_2eproto();
void protobuf_ShutdownFile_message_2eproto();

class Message;
class Point;
class Motor;

enum Message_Type {
  Message_Type_ERROR = 1,
  Message_Type_START = 2,
  Message_Type_STOP = 3,
  Message_Type_PING = 4,
  Message_Type_POINT = 5,
  Message_Type_SET = 6,
  Message_Type_GET = 7
};
bool Message_Type_IsValid(int value);
const Message_Type Message_Type_Type_MIN = Message_Type_ERROR;
const Message_Type Message_Type_Type_MAX = Message_Type_GET;
const int Message_Type_Type_ARRAYSIZE = Message_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Message_Type_descriptor();
inline const ::std::string& Message_Type_Name(Message_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Message_Type_descriptor(), value);
}
inline bool Message_Type_Parse(
    const ::std::string& name, Message_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message_Type>(
    Message_Type_descriptor(), name, value);
}
// ===================================================================

class Message : public ::google::protobuf::Message {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Message& default_instance();

  void Swap(Message* other);

  // implements Message ----------------------------------------------

  Message* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Message_Type Type;
  static const Type ERROR = Message_Type_ERROR;
  static const Type START = Message_Type_START;
  static const Type STOP = Message_Type_STOP;
  static const Type PING = Message_Type_PING;
  static const Type POINT = Message_Type_POINT;
  static const Type SET = Message_Type_SET;
  static const Type GET = Message_Type_GET;
  static inline bool Type_IsValid(int value) {
    return Message_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Message_Type_Type_MIN;
  static const Type Type_MAX =
    Message_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Message_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Message_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Message_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Message_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .delta.Message.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::delta::Message_Type type() const;
  inline void set_type(::delta::Message_Type value);

  // optional string info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::std::string& info() const;
  inline void set_info(const ::std::string& value);
  inline void set_info(const char* value);
  inline void set_info(const char* value, size_t size);
  inline ::std::string* mutable_info();
  inline ::std::string* release_info();
  inline void set_allocated_info(::std::string* info);

  // optional .delta.Point point = 3;
  inline bool has_point() const;
  inline void clear_point();
  static const int kPointFieldNumber = 3;
  inline const ::delta::Point& point() const;
  inline ::delta::Point* mutable_point();
  inline ::delta::Point* release_point();
  inline void set_allocated_point(::delta::Point* point);

  // optional .delta.Motor motor = 5;
  inline bool has_motor() const;
  inline void clear_motor();
  static const int kMotorFieldNumber = 5;
  inline const ::delta::Motor& motor() const;
  inline ::delta::Motor* mutable_motor();
  inline ::delta::Motor* release_motor();
  inline void set_allocated_motor(::delta::Motor* motor);

  // @@protoc_insertion_point(class_scope:delta.Message)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_point();
  inline void clear_has_point();
  inline void set_has_motor();
  inline void clear_has_motor();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* info_;
  ::delta::Point* point_;
  ::delta::Motor* motor_;
  int type_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static Message* default_instance_;
};
// -------------------------------------------------------------------

class Point : public ::google::protobuf::Message {
 public:
  Point();
  virtual ~Point();

  Point(const Point& from);

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Point& default_instance();

  void Swap(Point* other);

  // implements Message ----------------------------------------------

  Point* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline double x() const;
  inline void set_x(double value);

  // required double y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline double y() const;
  inline void set_y(double value);

  // required double z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline double z() const;
  inline void set_z(double value);

  // @@protoc_insertion_point(class_scope:delta.Point)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double x_;
  double y_;
  double z_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static Point* default_instance_;
};
// -------------------------------------------------------------------

class Motor : public ::google::protobuf::Message {
 public:
  Motor();
  virtual ~Motor();

  Motor(const Motor& from);

  inline Motor& operator=(const Motor& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Motor& default_instance();

  void Swap(Motor* other);

  // implements Message ----------------------------------------------

  Motor* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Motor& from);
  void MergeFrom(const Motor& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 p = 2;
  inline bool has_p() const;
  inline void clear_p();
  static const int kPFieldNumber = 2;
  inline ::google::protobuf::int32 p() const;
  inline void set_p(::google::protobuf::int32 value);

  // optional int32 i = 3;
  inline bool has_i() const;
  inline void clear_i();
  static const int kIFieldNumber = 3;
  inline ::google::protobuf::int32 i() const;
  inline void set_i(::google::protobuf::int32 value);

  // optional int32 d = 4;
  inline bool has_d() const;
  inline void clear_d();
  static const int kDFieldNumber = 4;
  inline ::google::protobuf::int32 d() const;
  inline void set_d(::google::protobuf::int32 value);

  // optional int32 position = 5;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 5;
  inline ::google::protobuf::int32 position() const;
  inline void set_position(::google::protobuf::int32 value);

  // optional int32 velocity = 6;
  inline bool has_velocity() const;
  inline void clear_velocity();
  static const int kVelocityFieldNumber = 6;
  inline ::google::protobuf::int32 velocity() const;
  inline void set_velocity(::google::protobuf::int32 value);

  // optional int32 torque = 7;
  inline bool has_torque() const;
  inline void clear_torque();
  static const int kTorqueFieldNumber = 7;
  inline ::google::protobuf::int32 torque() const;
  inline void set_torque(::google::protobuf::int32 value);

  // optional int32 punch = 8;
  inline bool has_punch() const;
  inline void clear_punch();
  static const int kPunchFieldNumber = 8;
  inline ::google::protobuf::int32 punch() const;
  inline void set_punch(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:delta.Motor)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_p();
  inline void clear_has_p();
  inline void set_has_i();
  inline void clear_has_i();
  inline void set_has_d();
  inline void clear_has_d();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_velocity();
  inline void clear_has_velocity();
  inline void set_has_torque();
  inline void clear_has_torque();
  inline void set_has_punch();
  inline void clear_has_punch();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 p_;
  ::google::protobuf::int32 i_;
  ::google::protobuf::int32 d_;
  ::google::protobuf::int32 position_;
  ::google::protobuf::int32 velocity_;
  ::google::protobuf::int32 torque_;
  ::google::protobuf::int32 punch_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static Motor* default_instance_;
};
// ===================================================================


// ===================================================================

// Message

// required .delta.Message.Type type = 1;
inline bool Message::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Message::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Message::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Message::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::delta::Message_Type Message::type() const {
  // @@protoc_insertion_point(field_get:delta.Message.type)
  return static_cast< ::delta::Message_Type >(type_);
}
inline void Message::set_type(::delta::Message_Type value) {
  assert(::delta::Message_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:delta.Message.type)
}

// optional string info = 2;
inline bool Message::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Message::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Message::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Message::clear_info() {
  if (info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_->clear();
  }
  clear_has_info();
}
inline const ::std::string& Message::info() const {
  // @@protoc_insertion_point(field_get:delta.Message.info)
  return *info_;
}
inline void Message::set_info(const ::std::string& value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_ = new ::std::string;
  }
  info_->assign(value);
  // @@protoc_insertion_point(field_set:delta.Message.info)
}
inline void Message::set_info(const char* value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_ = new ::std::string;
  }
  info_->assign(value);
  // @@protoc_insertion_point(field_set_char:delta.Message.info)
}
inline void Message::set_info(const char* value, size_t size) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_ = new ::std::string;
  }
  info_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:delta.Message.info)
}
inline ::std::string* Message::mutable_info() {
  set_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:delta.Message.info)
  return info_;
}
inline ::std::string* Message::release_info() {
  clear_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = info_;
    info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Message::set_allocated_info(::std::string* info) {
  if (info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete info_;
  }
  if (info) {
    set_has_info();
    info_ = info;
  } else {
    clear_has_info();
    info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:delta.Message.info)
}

// optional .delta.Point point = 3;
inline bool Message::has_point() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Message::set_has_point() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Message::clear_has_point() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Message::clear_point() {
  if (point_ != NULL) point_->::delta::Point::Clear();
  clear_has_point();
}
inline const ::delta::Point& Message::point() const {
  // @@protoc_insertion_point(field_get:delta.Message.point)
  return point_ != NULL ? *point_ : *default_instance_->point_;
}
inline ::delta::Point* Message::mutable_point() {
  set_has_point();
  if (point_ == NULL) point_ = new ::delta::Point;
  // @@protoc_insertion_point(field_mutable:delta.Message.point)
  return point_;
}
inline ::delta::Point* Message::release_point() {
  clear_has_point();
  ::delta::Point* temp = point_;
  point_ = NULL;
  return temp;
}
inline void Message::set_allocated_point(::delta::Point* point) {
  delete point_;
  point_ = point;
  if (point) {
    set_has_point();
  } else {
    clear_has_point();
  }
  // @@protoc_insertion_point(field_set_allocated:delta.Message.point)
}

// optional .delta.Motor motor = 5;
inline bool Message::has_motor() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Message::set_has_motor() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Message::clear_has_motor() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Message::clear_motor() {
  if (motor_ != NULL) motor_->::delta::Motor::Clear();
  clear_has_motor();
}
inline const ::delta::Motor& Message::motor() const {
  // @@protoc_insertion_point(field_get:delta.Message.motor)
  return motor_ != NULL ? *motor_ : *default_instance_->motor_;
}
inline ::delta::Motor* Message::mutable_motor() {
  set_has_motor();
  if (motor_ == NULL) motor_ = new ::delta::Motor;
  // @@protoc_insertion_point(field_mutable:delta.Message.motor)
  return motor_;
}
inline ::delta::Motor* Message::release_motor() {
  clear_has_motor();
  ::delta::Motor* temp = motor_;
  motor_ = NULL;
  return temp;
}
inline void Message::set_allocated_motor(::delta::Motor* motor) {
  delete motor_;
  motor_ = motor;
  if (motor) {
    set_has_motor();
  } else {
    clear_has_motor();
  }
  // @@protoc_insertion_point(field_set_allocated:delta.Message.motor)
}

// -------------------------------------------------------------------

// Point

// required double x = 1;
inline bool Point::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Point::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Point::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Point::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double Point::x() const {
  // @@protoc_insertion_point(field_get:delta.Point.x)
  return x_;
}
inline void Point::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:delta.Point.x)
}

// required double y = 2;
inline bool Point::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Point::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Point::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Point::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double Point::y() const {
  // @@protoc_insertion_point(field_get:delta.Point.y)
  return y_;
}
inline void Point::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:delta.Point.y)
}

// required double z = 3;
inline bool Point::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Point::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Point::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Point::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline double Point::z() const {
  // @@protoc_insertion_point(field_get:delta.Point.z)
  return z_;
}
inline void Point::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:delta.Point.z)
}

// -------------------------------------------------------------------

// Motor

// required int32 id = 1;
inline bool Motor::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Motor::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Motor::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Motor::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Motor::id() const {
  // @@protoc_insertion_point(field_get:delta.Motor.id)
  return id_;
}
inline void Motor::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:delta.Motor.id)
}

// optional int32 p = 2;
inline bool Motor::has_p() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Motor::set_has_p() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Motor::clear_has_p() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Motor::clear_p() {
  p_ = 0;
  clear_has_p();
}
inline ::google::protobuf::int32 Motor::p() const {
  // @@protoc_insertion_point(field_get:delta.Motor.p)
  return p_;
}
inline void Motor::set_p(::google::protobuf::int32 value) {
  set_has_p();
  p_ = value;
  // @@protoc_insertion_point(field_set:delta.Motor.p)
}

// optional int32 i = 3;
inline bool Motor::has_i() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Motor::set_has_i() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Motor::clear_has_i() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Motor::clear_i() {
  i_ = 0;
  clear_has_i();
}
inline ::google::protobuf::int32 Motor::i() const {
  // @@protoc_insertion_point(field_get:delta.Motor.i)
  return i_;
}
inline void Motor::set_i(::google::protobuf::int32 value) {
  set_has_i();
  i_ = value;
  // @@protoc_insertion_point(field_set:delta.Motor.i)
}

// optional int32 d = 4;
inline bool Motor::has_d() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Motor::set_has_d() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Motor::clear_has_d() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Motor::clear_d() {
  d_ = 0;
  clear_has_d();
}
inline ::google::protobuf::int32 Motor::d() const {
  // @@protoc_insertion_point(field_get:delta.Motor.d)
  return d_;
}
inline void Motor::set_d(::google::protobuf::int32 value) {
  set_has_d();
  d_ = value;
  // @@protoc_insertion_point(field_set:delta.Motor.d)
}

// optional int32 position = 5;
inline bool Motor::has_position() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Motor::set_has_position() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Motor::clear_has_position() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Motor::clear_position() {
  position_ = 0;
  clear_has_position();
}
inline ::google::protobuf::int32 Motor::position() const {
  // @@protoc_insertion_point(field_get:delta.Motor.position)
  return position_;
}
inline void Motor::set_position(::google::protobuf::int32 value) {
  set_has_position();
  position_ = value;
  // @@protoc_insertion_point(field_set:delta.Motor.position)
}

// optional int32 velocity = 6;
inline bool Motor::has_velocity() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Motor::set_has_velocity() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Motor::clear_has_velocity() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Motor::clear_velocity() {
  velocity_ = 0;
  clear_has_velocity();
}
inline ::google::protobuf::int32 Motor::velocity() const {
  // @@protoc_insertion_point(field_get:delta.Motor.velocity)
  return velocity_;
}
inline void Motor::set_velocity(::google::protobuf::int32 value) {
  set_has_velocity();
  velocity_ = value;
  // @@protoc_insertion_point(field_set:delta.Motor.velocity)
}

// optional int32 torque = 7;
inline bool Motor::has_torque() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Motor::set_has_torque() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Motor::clear_has_torque() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Motor::clear_torque() {
  torque_ = 0;
  clear_has_torque();
}
inline ::google::protobuf::int32 Motor::torque() const {
  // @@protoc_insertion_point(field_get:delta.Motor.torque)
  return torque_;
}
inline void Motor::set_torque(::google::protobuf::int32 value) {
  set_has_torque();
  torque_ = value;
  // @@protoc_insertion_point(field_set:delta.Motor.torque)
}

// optional int32 punch = 8;
inline bool Motor::has_punch() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Motor::set_has_punch() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Motor::clear_has_punch() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Motor::clear_punch() {
  punch_ = 0;
  clear_has_punch();
}
inline ::google::protobuf::int32 Motor::punch() const {
  // @@protoc_insertion_point(field_get:delta.Motor.punch)
  return punch_;
}
inline void Motor::set_punch(::google::protobuf::int32 value) {
  set_has_punch();
  punch_ = value;
  // @@protoc_insertion_point(field_set:delta.Motor.punch)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace delta

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::delta::Message_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::delta::Message_Type>() {
  return ::delta::Message_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_message_2eproto__INCLUDED
